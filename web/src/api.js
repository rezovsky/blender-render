import axios from "axios";
import { toCamelCase, toSnakeCase } from "@/utils";

const API_BASE_URL = `/api`;

const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

// üî• –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É—Ç–µ–π
function normalizePath(path) {
  if (typeof path !== "string") return path;
  return path.replace(/\\/g, "/"); // –ó–∞–º–µ–Ω—è–µ–º `\` –Ω–∞ `/`
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è API-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
export async function apiRequest(method, endpoint, params = {}) {
  try {
    const isGetRequest = method.toUpperCase() === "GET";
    let config = { method, url: endpoint };

    // üî• –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –ø—É—Ç–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    const normalizedParams = JSON.parse(
      JSON.stringify(toSnakeCase(params), (key, value) => normalizePath(value))
    );

    if (isGetRequest) {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ snake_case –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ URL
      const queryParams = new URLSearchParams(normalizedParams).toString();
      config.url += queryParams ? `?${queryParams}` : "";
    } else {
      // –î–ª—è POST, PUT, DELETE –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –≤ body (—Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π)
      config.data = normalizedParams;
    }

    const response = await apiClient(config);
    const responseData = toCamelCase(response.data); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ

    console.log(`üîπ ${method.toUpperCase()} ${config.url} ‚Üí –û—Ç–≤–µ—Ç:`, responseData);
    return responseData;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ${method.toUpperCase()} ${endpoint}:`, error);
    throw error;
  }
}
